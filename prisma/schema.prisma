generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_URL")
}

model User {
  user_id                  String     @id
  user_email               String     @unique
  user_username            String     @unique
  user_lastseen            DateTime   @updatedAt
  user_datecreated         DateTime   @default(now())
  user_fullname            String
  user_bio                 String?
  user_followers           String[]
  user_following           String[]
  user_avatar              Json       @db.Json
  user_streak              Int        @default(0)
  user_highlight_questions String[]
  user_api_token           String     @default(cuid())
  user_twitter_handle      String?
  User_Habits              Habit[]
  User_Page                Page[]
  User_Routine             Routine[]
  User_Story               Story[]
  User_Templates           Template[]
  User_Todo                Todo[]
}

model Page {
  page_id            String   @id @default(cuid())
  page_datecreated   DateTime @default(now())
  page_title         String
  page_last_accessed DateTime @updatedAt
  page_user_id       String
  Page_User          User     @relation(fields: [page_user_id], references: [user_id])
  Page_Story         Story?
  Page_Todo          Todo[]

  @@unique([page_user_id, page_title], name: "user_title_unique")
}

model Routine {
  routine_id            String   @id @default(cuid())
  routine_datecreated   DateTime @default(now())
  routine_user_id       String
  routine_last_accessed DateTime @updatedAt
  routine_title         String
  Routine_User          User     @relation(fields: [routine_user_id], references: [user_id])
  Routine_Habits        Habit[]

  @@unique([routine_user_id, routine_title], name: "user_routine_title_unique")
}

model Story {
  story_id          String   @id @default(cuid())
  story_datecreated DateTime @default(now())
  story_user_id     String
  story_title       String
  story_page_id     String   @unique
  Story_Page        Page     @relation(fields: [story_page_id], references: [page_id])
  Story_User        User     @relation(fields: [story_user_id], references: [user_id])
  Story_Todo        Todo[]

  @@unique([story_user_id, story_title], name: "story_user_title_unique")
}

model Todo {
  todo_id                  String   @id @default(cuid())
  todo_datecreated         DateTime @default(now())
  todo_description         String
  todo_done                Boolean  @default(false)
  todo_user_id             String
  todo_page_id             String
  todo_archived            Boolean  @default(false)
  todo_highlight           Boolean  @default(false)
  todo_story_id            String?
  todo_details             String?
  todo_highlight_questions Json?    @db.Json
  Todo_Page                Page     @relation(fields: [todo_page_id], references: [page_id])
  Todo_Story               Story?   @relation(fields: [todo_story_id], references: [story_id])
  Todo_User                User     @relation(fields: [todo_user_id], references: [user_id])
}

model Habit {
  habit_id          String   @id @default(cuid())
  habit_datecreated DateTime @default(now())
  habit_description String
  habit_done        Boolean  @default(false)
  habit_user_id     String
  habit_routine_id  String
  Habit_Routine     Routine  @relation(fields: [habit_routine_id], references: [routine_id])
  Habit_User        User     @relation(fields: [habit_user_id], references: [user_id])
}

model Template {
  template_id      String   @id @default(cuid())
  template_title   String
  template_habits  String[]
  template_user_id String
  Template_User    User     @relation(fields: [template_user_id], references: [user_id])
}
